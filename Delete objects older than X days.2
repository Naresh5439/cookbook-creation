#!/usr/bin/env python3
"""
Simple S3 Cleanup Script
Deletes objects older than a specified number of days from a given bucket.
Configuration is read from .env
"""

import os
from datetime import datetime, timezone, timedelta
import boto3
from dotenv import load_dotenv
from botocore.exceptions import ClientError

# ----- Load environment variables -----
load_dotenv()

# ----- AWS credentials and config -----
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("AWS_REGION")
BUCKET_NAME = os.getenv("BUCKET_NAME")
OLDER_THAN_DAYS = int(os.getenv("OLDER_THAN_DAYS", 1))  # Default 30 days

# ----- Validate environment variables -----
if not all([AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, BUCKET_NAME]):
    raise ValueError("Missing AWS credentials, region, or bucket name in .env")

# ----- Debug info -----
print(f"Using AWS region: {AWS_REGION}")
print(f"Bucket: {BUCKET_NAME}")
print(f"Deleting objects older than {OLDER_THAN_DAYS} days")

# ----- Create S3 client -----
s3_client = boto3.client(
    "s3",
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    region_name=AWS_REGION
)

# ----- Cutoff date -----
cutoff_date = datetime.now(timezone.utc) - timedelta(days=OLDER_THAN_DAYS)
print("Cutoff date:", cutoff_date)

# ----- Delete objects -----
deleted_count = 0
try:
    paginator = s3_client.get_paginator("list_objects_v2")

    for page in paginator.paginate(Bucket=BUCKET_NAME):
        for obj in page.get("Contents", []):
            key = obj["Key"]
            last_modified = obj["LastModified"]

            # Debug print
            print("Checking object:", key, "LastModified:", last_modified)

            if last_modified < cutoff_date:
                try:
                    s3_client.delete_object(Bucket=BUCKET_NAME, Key=key)
                    deleted_count += 1
                    print(f"Deleted: {key}")
                except ClientError as e:
                    print(f"Failed to delete {key}: {e}")

    print(f"\nTotal objects deleted: {deleted_count}")

except ClientError as e:
    print(f"AWS Client Error: {e}")
except Exception as e:
    print(f"Unexpected error: {e}")
