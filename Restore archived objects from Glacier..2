
#!/usr/bin/env python3
"""
Restore S3 Glacier Objects
Submits restore requests for objects in GLACIER, DEEP_ARCHIVE, or GLACIER_IR storage class.
Uses environment variables from .env for configuration.
"""

import os
import boto3
from dotenv import load_dotenv
from botocore.exceptions import ClientError, NoCredentialsError, PartialCredentialsError

# ----- Load environment variables -----
load_dotenv()

# ----- Read AWS credentials and config -----
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("AWS_REGION")
BUCKET_NAME = os.getenv("BUCKET_NAME")
RESTORE_DAYS = int(os.getenv("RESTORE_DAYS", 7))
RESTORE_TIER = os.getenv("RESTORE_TIER", "Standard")  # Default to Standard

# ----- Validate environment variables -----
missing_vars = []
for var_name, var_value in [
    ("AWS_ACCESS_KEY", AWS_ACCESS_KEY_ID),
    ("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY),
    ("AWS_REGION", AWS_REGION),
    ("BUCKET_NAME", BUCKET_NAME)
]:
    if not var_value:
        missing_vars.append(var_name)

if missing_vars:
    raise ValueError(f"Missing environment variables: {', '.join(missing_vars)}")

# ----- Debug print -----
print(f"Using AWS region: {AWS_REGION}")
print(f"Bucket: {BUCKET_NAME}")
print(f"Restore duration (days): {RESTORE_DAYS}, Tier: {RESTORE_TIER}")

# ----- Create S3 client -----
session = boto3.Session(
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    region_name=AWS_REGION
)
s3_client = session.client("s3")

# ----- Restore Glacier objects -----
try:
    paginator = s3_client.get_paginator("list_objects_v2")
    glacier_objects = []

    for page in paginator.paginate(Bucket=BUCKET_NAME):
        for obj in page.get("Contents", []):
            if obj.get("StorageClass") in ["GLACIER", "DEEP_ARCHIVE", "GLACIER_IR"]:
                glacier_objects.append(obj["Key"])

    if not glacier_objects:
        print(f"No archived objects found in bucket '{BUCKET_NAME}'.")
    else:
        print(f"Found {len(glacier_objects)} archived objects. Submitting restore requests...")

        for key in glacier_objects:
            try:
                s3_client.restore_object(
                    Bucket=BUCKET_NAME,
                    Key=key,
                    RestoreRequest={
                        "Days": RESTORE_DAYS,
                        "GlacierJobParameters": {"Tier": RESTORE_TIER}
                    }
                )
                print(f"Restore request submitted for: {key}")
            except ClientError as e:
                print(f"Failed to submit restore for {key}: {e}")

except NoCredentialsError:
    print("AWS credentials not found or invalid.")
except PartialCredentialsError:
    print("Incomplete AWS credentials provided.")
except ClientError as e:
    print(f"AWS Client Error: {e}")
except Exception as e:
    print(f"Unexpected error: {e}")
